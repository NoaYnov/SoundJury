#!/usr/bin/env python3
"""
Test int√©gral du syst√®me SoundJury avec authentification
"""

def test_complete_system():
    print("üß™ Test complet du syst√®me SoundJury...")
    
    # Test 1: Syst√®me d'authentification
    print("\n1. Test du syst√®me d'authentification...")
    try:
        from auth import user_manager
        from ratings import get_track_id, add_rating, get_rating
        print("   ‚úÖ Modules d'authentification import√©s")
    except ImportError as e:
        print(f"   ‚ùå Erreur d'import: {e}")
        return False
    
    # Test 2: Cr√©ation d'utilisateur test
    print("\n2. Test de cr√©ation d'utilisateur...")
    test_email = "testuser@example.com"
    user, error = user_manager.create_user(test_email, "password123", "TestUser")
    
    if error and "existe d√©j√†" in error:
        print("   ‚úÖ Utilisateur existe d√©j√†")
        user = user_manager.get_user(test_email)
    elif user:
        print("   ‚úÖ Utilisateur cr√©√© avec succ√®s")
        user_manager.verify_user(test_email)  # V√©rifier automatiquement
    else:
        print(f"   ‚ùå Erreur: {error}")
        return False
    
    # Test 3: Syst√®me de notation avec utilisateur
    print("\n3. Test du syst√®me de notation authentifi√©...")
    
    # Test avec utilisateur connect√©
    success, error_msg = add_rating("Test Artist", "Test Song", 5, test_email)
    if success:
        print("   ‚úÖ Note ajout√©e avec succ√®s")
    else:
        if "d√©j√† not√©" in error_msg:
            print("   ‚úÖ Protection contre double vote fonctionnelle")
        else:
            print(f"   ‚ùå Erreur: {error_msg}")
    
    # Test sans utilisateur
    success, error_msg = add_rating("Test Artist 2", "Test Song 2", 4, None)
    if not success and "non connect√©" in error_msg:
        print("   ‚úÖ Protection utilisateur non connect√© fonctionnelle")
    else:
        print("   ‚ùå La protection n'a pas fonctionn√©")
    
    # Test 4: V√©rification des donn√©es
    print("\n4. V√©rification des donn√©es...")
    rating_info = get_rating("Test Artist", "Test Song")
    if rating_info.get("count", 0) > 0:
        print(f"   ‚úÖ Donn√©es sauvegard√©es: {rating_info['average']}/5 ({rating_info['count']} votes)")
    else:
        print("   ‚ùå Aucune donn√©e trouv√©e")
    
    # Test 5: Fichiers cr√©√©s
    print("\n5. V√©rification des fichiers...")
    import os
    files_to_check = ["users.json", "ratings.json"]
    for file in files_to_check:
        if os.path.exists(file):
            size = os.path.getsize(file)
            print(f"   ‚úÖ {file} cr√©√© ({size} bytes)")
        else:
            print(f"   ‚ö†Ô∏è {file} non trouv√©")
    
    # Test 6: Flask et templates
    print("\n6. V√©rification des templates...")
    template_files = [
        "templates/base.html",
        "templates/login.html", 
        "templates/register.html",
        "templates/index.html",
        "templates/home.html"
    ]
    
    for template in template_files:
        if os.path.exists(template):
            print(f"   ‚úÖ {template} pr√©sent")
        else:
            print(f"   ‚ùå {template} manquant")
    
    print("\nüéâ Test complet termin√© !")
    print("\nüöÄ Pour d√©marrer l'application :")
    print("   python app.py")
    print("   Puis ouvrez http://localhost:5000")
    
    return True

if __name__ == "__main__":
    test_complete_system()
